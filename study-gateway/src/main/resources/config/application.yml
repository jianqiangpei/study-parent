server:
  port: 8080

spring:
  application:
    name: study-gateway
  profiles:
    active: @spring.profiles.active@
  cloud:
    gateway:
      filter:
        request-rate-limiter:
#          ### 是否允许空key 如果令牌桶中没有拿到key，如果配置true，会把该请求拦截
          deny-empty-key: true
#          ### 当请求被拦截后，抛出的http 状态码
          empty-key-status-code: 999
      discovery:
        locator:
          enabled: true
      routes:
        - id: order-api
          uri: lb://study-order
          order: 0
          predicates:
  #         path 表示会匹配到 以/order/开始的，完全匹配【/trande/1 , /trande/abc 等等】完全匹配 /trande 会被路由
            - Path=/order/rest/order
  #         query 表示api中必须包含name为baz的查询条件，否则无法路由到order服务.只针对脸上有baz的query
  #        - Query=baz
  #         header 表示在请求header中必须有X-AUTH的请求头，数值必须符合【\d+】的正则格式
  #        - Header=X-AUTH , \d+
  #         method 表示只会匹配到method为get的请求，才会做路由
  #        - Method=GET
  #        这个ip地址 192.168.1.1/24 科普一下。它表示的是一个网段，那个“/24”是子网掩码的缩写形式，表示你的子网掩码是255.255.255.0（前24位表示网络地址，因此缩写为/24），看起来你可以设定一个除192.168.1.0、192.168.1.1、192.168.1.255之外的任意ip尾数，比如192.168.1.2
  #        - RemoteAddr=192.168.1.1/24
          filters:
  #        为请求的路径增加mypath 前缀
  #        - PrefixPath=/mypath
  #        跳过头的数值 例如：访问gateway的请求为 /order/rest/order , 配置了StripPrefix 就变成了 /rest/order
            - StripPrefix=1
  #        为gateway分发的需求增加header ， 名称为X-Request-Foo ， 值为Bar
  #        - AddRequestHeader=X-Request-Foo , Bar
  #        为gateway分发的需求增加requestParameter , 名称为foo 值为bar
  #        - AddRequestParameter=foo , bar
  #        为gateway分发的需求增加Response
#            - name: AddResponseHeader
#              args:
#                name: x-auth
#                value: abc
  #        - AddResponseHeader=X-Response-Foo , bar
  #        该filter没有参数。设置了该Filter后，GatewayFilter将不使用由HTTP客户端确定的host header ，而是发送原始host header
  #        例如本机请求，没有配置该项，即PreserveHostHeader=false，接受的Host Header为Http的ip+端口,配置为true显示，Host的header为访问的ip+端口
  #        外部机器访问，配置为false，得到的为ip:8080,而配置为true后，得到的为ip+8102
  #        - PreserveHostHeader
            - name: RequestRateLimiter
              args:
              ### 使用redis 限流的时候 生成redis的key 这里使用的是ip
                key-resolver: '#{@remoteAddrKeyResolver}'
                redis-rate-limiter:
#                  ### 每秒允许最大的访问量
                  replenishRate: 1
#                  ### 允许1秒内执行的最大的数量。这是令牌桶可以容纳的令牌数。将此值设置为零将阻止所有请求。
#                  ### 为防止瞬间突发请求增多，如果1s突然有超过 【replenishRate】个请求过来，仍然允许通过，但是下一秒仍然超过【replenishRate】个请求，就会拦截
                  burstCapacity: 2
            ### 重定向码，返回3XXX(必须是3开头),在header中增加location:http://www.baidu.com
            ### 不会去访问http://www.baidu.com
#            - RedirectTo=302 , http://www.baidu.com
            ### 替换路径,将rest替换成1。支持正则
#            - RewritePath=rest, 1
#            - RewritePath=/order/(?<segment>.*), /$\{segment}
            ## 替换response中的值，可以配合AddResponseHeader一起使用，且RewriteResponseHeader一定在AddResponseHeader后执行
#            - name: RewriteResponseHeader
#              args:
#                name: x-auth
#                regexp: abc
#                replacement: efg
            - name: SetPath
              args:
                template: /$\{segment}

#      globalcors:
#        cors-configurations:
#          '[/**]':
#            allowed-origins: '*'
#            allowed-methods:
#            - GET
#            - POST
#            - PUT
#            - DELETE
#            - OPTIONS
#            - PATCH
#            allowed-headers: '*'
#            allow-credentials: true
